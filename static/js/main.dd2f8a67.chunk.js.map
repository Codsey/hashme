{"version":3,"sources":["Main.jsx","App.js","serviceWorker.js","index.js"],"names":["Main","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","type","data","hash","copied","typeChange","bind","assertThisInitialized","onDataChange","e","setState","target","value","md5","sha1","update","digest","sha224","sha256","sha384","sha512","_this2","react_default","a","createElement","Container","Row","Col","sm","md","size","style","marginTop","textAlign","href","rel","offset","className","defaultChecked","id","name","onChange","htmlFor","order","FormGroup","Input","placeholder","lib","text","onCopy","staticHandler","Component","App","src_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd2f8a67.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Container, Row, Col, FormGroup, Input } from \"reactstrap\";\r\nimport md5 from \"md5\";\r\nimport hash from \"hash.js\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\n\r\nclass Main extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      type: \"MD5\",\r\n      data: \"\",\r\n      hash: \"HASH\",\r\n      copied: false\r\n    };\r\n    this.typeChange = this.typeChange.bind(this);\r\n    this.onDataChange = this.onDataChange.bind(this);\r\n  }\r\n\r\n  typeChange(e) {\r\n    this.setState({\r\n      type: e.target.value,\r\n      data: \"\",\r\n      hash: \"HASH\",\r\n      copied: false\r\n    });\r\n  }\r\n\r\n  onDataChange(e) {\r\n    const { type } = this.state;\r\n    if (e.target.value === \"\") {\r\n      this.setState({ data: \"\", hash: \"HASH\" });\r\n    } else if (type === \"MD5\") {\r\n      this.setState({ data: e.target.value, hash: md5(e.target.value) });\r\n    } else if (type === \"SHA-1\") {\r\n      this.setState({\r\n        data: e.target.value,\r\n        hash: hash\r\n          .sha1()\r\n          .update(e.target.value)\r\n          .digest(\"hex\")\r\n      });\r\n    } else if (type === \"SHA-224\") {\r\n      this.setState({\r\n        data: e.target.value,\r\n        hash: hash\r\n          .sha224()\r\n          .update(e.target.value)\r\n          .digest(\"hex\")\r\n      });\r\n    } else if (type === \"SHA-256\") {\r\n      this.setState({\r\n        data: e.target.value,\r\n        hash: hash\r\n          .sha256()\r\n          .update(e.target.value)\r\n          .digest(\"hex\")\r\n      });\r\n    } else if (type === \"SHA-384\") {\r\n      this.setState({\r\n        data: e.target.value,\r\n        hash: hash\r\n          .sha384()\r\n          .update(e.target.value)\r\n          .digest(\"hex\")\r\n      });\r\n    } else if (type === \"SHA-512\") {\r\n      this.setState({\r\n        data: e.target.value,\r\n        hash: hash\r\n          .sha512()\r\n          .update(e.target.value)\r\n          .digest(\"hex\")\r\n      });\r\n    }\r\n  }\r\n\r\n  staticHandler() {}\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Container>\r\n          <Row>\r\n            <Col sm=\"12\" md={{ size: 12 }} style={{ marginTop: \"2rem\" }}>\r\n              <h1 style={{ textAlign: \"center\" }}>HASH ME</h1>\r\n              <p style={{ textAlign: \"center\" }}>\r\n                Created by{\" \"}\r\n                <a\r\n                  href=\"https://github.com/Codsey\"\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  Codsey\r\n                </a>\r\n              </p>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n        <Container style={{ marginTop: \"5%\" }}>\r\n          <Row>\r\n            <Col sm=\"12\" md={{ size: 2, offset: 3 }}>\r\n              <div className=\"mb-3\">\r\n                <small className=\"text-uppercase font-weight-bold\">\r\n                  HASH TYPE\r\n                </small>\r\n              </div>\r\n              <div className=\"custom-control custom-radio mb-3\">\r\n                <input\r\n                  defaultChecked\r\n                  className=\"custom-control-input\"\r\n                  id=\"customRadio1\"\r\n                  name=\"custom-radio-1\"\r\n                  type=\"radio\"\r\n                  value={\"MD5\"}\r\n                  onChange={this.typeChange}\r\n                />\r\n                <label className=\"custom-control-label\" htmlFor=\"customRadio1\">\r\n                  <span>MD5 Hash</span>\r\n                </label>\r\n              </div>\r\n              <div className=\"custom-control custom-radio mb-3\">\r\n                <input\r\n                  className=\"custom-control-input\"\r\n                  id=\"customRadio2\"\r\n                  name=\"custom-radio-1\"\r\n                  type=\"radio\"\r\n                  value={\"SHA-1\"}\r\n                  onChange={this.typeChange}\r\n                />\r\n                <label className=\"custom-control-label\" htmlFor=\"customRadio2\">\r\n                  <span>SHA-1 Hash</span>\r\n                </label>\r\n              </div>\r\n              <div className=\"custom-control custom-radio mb-3\">\r\n                <input\r\n                  className=\"custom-control-input\"\r\n                  id=\"customRadio3\"\r\n                  name=\"custom-radio-1\"\r\n                  type=\"radio\"\r\n                  value={\"SHA-224\"}\r\n                  onChange={this.typeChange}\r\n                />\r\n                <label className=\"custom-control-label\" htmlFor=\"customRadio3\">\r\n                  <span>SHA-224 Hash</span>\r\n                </label>\r\n              </div>\r\n              <div className=\"custom-control custom-radio mb-3\">\r\n                <input\r\n                  className=\"custom-control-input\"\r\n                  id=\"customRadio4\"\r\n                  name=\"custom-radio-1\"\r\n                  type=\"radio\"\r\n                  value={\"SHA-256\"}\r\n                  onChange={this.typeChange}\r\n                />\r\n                <label className=\"custom-control-label\" htmlFor=\"customRadio4\">\r\n                  <span>SHA-256 Hash</span>\r\n                </label>\r\n              </div>\r\n              <div className=\"custom-control custom-radio mb-3\">\r\n                <input\r\n                  className=\"custom-control-input\"\r\n                  id=\"customRadio5\"\r\n                  name=\"custom-radio-1\"\r\n                  type=\"radio\"\r\n                  value={\"SHA-384\"}\r\n                  onChange={this.typeChange}\r\n                />\r\n                <label className=\"custom-control-label\" htmlFor=\"customRadio5\">\r\n                  <span>SHA-384 Hash</span>\r\n                </label>\r\n              </div>\r\n              <div className=\"custom-control custom-radio mb-3\">\r\n                <input\r\n                  className=\"custom-control-input\"\r\n                  id=\"customRadio6\"\r\n                  name=\"custom-radio-1\"\r\n                  type=\"radio\"\r\n                  value={\"SHA-512\"}\r\n                  onChange={this.typeChange}\r\n                />\r\n                <label className=\"custom-control-label\" htmlFor=\"customRadio6\">\r\n                  <span>SHA-512 Hash</span>\r\n                </label>\r\n              </div>\r\n            </Col>\r\n            <Col\r\n              md={{ size: 5, offset: 0, order: 0 }}\r\n              style={{ marginTop: \"4%\" }}\r\n            >\r\n              <FormGroup>\r\n                <Input\r\n                  className=\"form-control-alternative\"\r\n                  placeholder=\"DATA\"\r\n                  value={this.state.data}\r\n                  type=\"text\"\r\n                  onChange={this.onDataChange}\r\n                />\r\n              </FormGroup>\r\n              <CopyToClipboard\r\n                text={this.state.hash}\r\n                onCopy={() =>\r\n                  this.state.data !== \"\"\r\n                    ? this.setState({ copied: true })\r\n                    : this.setState({ copied: false })\r\n                }\r\n              >\r\n                <FormGroup>\r\n                  <Input\r\n                    className=\"form-control-alternative is-valid\"\r\n                    placeholder=\"HASH\"\r\n                    type=\"text\"\r\n                    value={this.state.hash}\r\n                    onChange={this.staticHandler}\r\n                  />\r\n                </FormGroup>\r\n              </CopyToClipboard>\r\n              {this.state.copied ? (\r\n                <p> Copied to clipboard</p>\r\n              ) : (\r\n                <p>Click on the input field to copy</p>\r\n              )}\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport './App.css';\nimport Main from './Main'\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}